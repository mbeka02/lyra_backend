// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type AppointmentStatus string

const (
	AppointmentStatusScheduled AppointmentStatus = "scheduled"
	AppointmentStatusCompleted AppointmentStatus = "completed"
	AppointmentStatusCanceled  AppointmentStatus = "canceled"
)

func (e *AppointmentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AppointmentStatus(s)
	case string:
		*e = AppointmentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AppointmentStatus: %T", src)
	}
	return nil
}

type NullAppointmentStatus struct {
	AppointmentStatus AppointmentStatus
	Valid             bool // Valid is true if AppointmentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAppointmentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AppointmentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AppointmentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAppointmentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AppointmentStatus), nil
}

type Role string

const (
	RolePatient    Role = "patient"
	RoleSpecialist Role = "specialist"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Appointment struct {
	AppointmentID int64
	PatientID     int64
	DoctorID      int64
	CurrentStatus AppointmentStatus
	Reason        string
	Notes         sql.NullString
	StartTime     time.Time
	EndTime       time.Time
	CreatedAt     time.Time
	UpdatedAt     sql.NullTime
}

type Availability struct {
	AvailabilityID int64
	DoctorID       int64
	StartTime      time.Time
	EndTime        time.Time
	IsRecurring    sql.NullBool
	SpecificDate   sql.NullTime
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
	DayOfWeek      int32
}

type Doctor struct {
	DoctorID       int64
	UserID         int64
	Description    string
	Specialization string
	LicenseNumber  string
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
}

type Patient struct {
	PatientID   int64
	UserID      int64
	DateOfBirth time.Time
	Allergies   string
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
}

type User struct {
	UserID            int64
	FullName          string
	Password          string
	Email             string
	TelephoneNumber   string
	ProfileImageUrl   string
	CreatedAt         time.Time
	UserRole          Role
	VerifiedAt        sql.NullTime
	PasswordChangedAt time.Time
}
