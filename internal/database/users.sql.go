// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(full_name , password , email) VALUES ($1,$2,$3) RETURNING user_id, full_name, password, email, created_at, verified_at, password_changed_at
`

type CreateUserParams struct {
	FullName string
	Password string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FullName, arg.Password, arg.Email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.VerifiedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, full_name, password, email, created_at, verified_at, password_changed_at FROM users WHERE email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.VerifiedAt,
		&i.PasswordChangedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT user_id , full_name , email FROM users LIMIT $1 OFFSET $2
`

type GetUsersParams struct {
	Limit  int32
	Offset int32
}

type GetUsersRow struct {
	UserID   int64
	FullName string
	Email    string
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.UserID, &i.FullName, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
