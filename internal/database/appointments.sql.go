// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments(patient_id,specialist_id,appointment_date) VALUES ($1,$2,$3) RETURNING appointment_id, patient_id, specialist_id, current_status, appointment_date
`

type CreateAppointmentParams struct {
	PatientID       sql.NullInt64
	SpecialistID    sql.NullInt64
	AppointmentDate time.Time
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment, arg.PatientID, arg.SpecialistID, arg.AppointmentDate)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.PatientID,
		&i.SpecialistID,
		&i.CurrentStatus,
		&i.AppointmentDate,
	)
	return i, err
}

const getPatientAppointments = `-- name: GetPatientAppointments :many
SELECT appointment_id, patient_id, specialist_id, current_status, appointment_date FROM appointments WHERE patient_id=$1 LIMIT $2 OFFSET $3
`

type GetPatientAppointmentsParams struct {
	PatientID sql.NullInt64
	Limit     int32
	Offset    int32
}

func (q *Queries) GetPatientAppointments(ctx context.Context, arg GetPatientAppointmentsParams) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getPatientAppointments, arg.PatientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PatientID,
			&i.SpecialistID,
			&i.CurrentStatus,
			&i.AppointmentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE appointments SET current_status=$1 WHERE appointment_id=$2
`

type UpdateAppointmentStatusParams struct {
	CurrentStatus Status
	AppointmentID int64
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentStatus, arg.CurrentStatus, arg.AppointmentID)
	return err
}
