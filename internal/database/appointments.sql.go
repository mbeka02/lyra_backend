// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package database

import (
	"context"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments(patient_id,doctor_id,start_time,end_time, reason) VALUES ($1,$2,$3,$4,$5) RETURNING appointment_id, patient_id, doctor_id, current_status, reason, notes, start_time, end_time, created_at, updated_at
`

type CreateAppointmentParams struct {
	PatientID int64     `json:"patient_id"`
	DoctorID  int64     `json:"doctor_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	Reason    string    `json:"reason"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment,
		arg.PatientID,
		arg.DoctorID,
		arg.StartTime,
		arg.EndTime,
		arg.Reason,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.PatientID,
		&i.DoctorID,
		&i.CurrentStatus,
		&i.Reason,
		&i.Notes,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments WHERE appointment_id=$1
`

func (q *Queries) DeleteAppointment(ctx context.Context, appointmentID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, appointmentID)
	return err
}

const getPatientAppointments = `-- name: GetPatientAppointments :many
SELECT appointment_id, patient_id, doctor_id, current_status, reason, notes, start_time, end_time, created_at, updated_at FROM appointments WHERE patient_id=$1 AND DATE(start_time) BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7  days'
`

func (q *Queries) GetPatientAppointments(ctx context.Context, patientID int64) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getPatientAppointments, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PatientID,
			&i.DoctorID,
			&i.CurrentStatus,
			&i.Reason,
			&i.Notes,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE appointments SET current_status=$1 WHERE appointment_id=$2
`

type UpdateAppointmentStatusParams struct {
	CurrentStatus AppointmentStatus `json:"current_status"`
	AppointmentID int64             `json:"appointment_id"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentStatus, arg.CurrentStatus, arg.AppointmentID)
	return err
}
