// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments(patient_id,doctor_id,start_time,end_time) VALUES ($1,$2,$3,$4) RETURNING appointment_id, patient_id, doctor_id, current_status, reason, notes, start_time, end_time, created_at, updated_at
`

type CreateAppointmentParams struct {
	PatientID int64
	DoctorID  int64
	StartTime pgtype.Timestamptz
	EndTime   pgtype.Timestamptz
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, createAppointment,
		arg.PatientID,
		arg.DoctorID,
		arg.StartTime,
		arg.EndTime,
	)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.PatientID,
		&i.DoctorID,
		&i.CurrentStatus,
		&i.Reason,
		&i.Notes,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointments WHERE appointment_id=$1
`

func (q *Queries) DeleteAppointment(ctx context.Context, appointmentID int64) error {
	_, err := q.db.Exec(ctx, deleteAppointment, appointmentID)
	return err
}

const getPatientAppointments = `-- name: GetPatientAppointments :many
SELECT appointment_id, patient_id, doctor_id, current_status, reason, notes, start_time, end_time, created_at, updated_at FROM appointments WHERE patient_id=$1 LIMIT $2 OFFSET $3
`

type GetPatientAppointmentsParams struct {
	PatientID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) GetPatientAppointments(ctx context.Context, arg GetPatientAppointmentsParams) ([]Appointment, error) {
	rows, err := q.db.Query(ctx, getPatientAppointments, arg.PatientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.AppointmentID,
			&i.PatientID,
			&i.DoctorID,
			&i.CurrentStatus,
			&i.Reason,
			&i.Notes,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :one
UPDATE appointments SET current_status=$1 WHERE appointment_id=$2 RETURNING appointment_id, patient_id, doctor_id, current_status, reason, notes, start_time, end_time, created_at, updated_at
`

type UpdateAppointmentStatusParams struct {
	CurrentStatus AppointmentStatus
	AppointmentID int64
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) (Appointment, error) {
	row := q.db.QueryRow(ctx, updateAppointmentStatus, arg.CurrentStatus, arg.AppointmentID)
	var i Appointment
	err := row.Scan(
		&i.AppointmentID,
		&i.PatientID,
		&i.DoctorID,
		&i.CurrentStatus,
		&i.Reason,
		&i.Notes,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
