// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: observations.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createObservation = `-- name: CreateObservation :one
INSERT INTO observations (
    patient_id,
    -- specialist_id, 
    status,
    code_text,
    effective_date_time,
    value_string
) VALUES (
    $1, $2, $3, $4, $5 
) RETURNING id, patient_id, status, code_text, effective_date_time, value_string, created_at, updated_at
`

type CreateObservationParams struct {
	PatientID         int64     `json:"patient_id"`
	Status            string    `json:"status"`
	CodeText          string    `json:"code_text"`
	EffectiveDateTime time.Time `json:"effective_date_time"`
	ValueString       string    `json:"value_string"`
}

func (q *Queries) CreateObservation(ctx context.Context, arg CreateObservationParams) (Observation, error) {
	row := q.db.QueryRowContext(ctx, createObservation,
		arg.PatientID,
		arg.Status,
		arg.CodeText,
		arg.EffectiveDateTime,
		arg.ValueString,
	)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.CodeText,
		&i.EffectiveDateTime,
		&i.ValueString,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteObservation = `-- name: DeleteObservation :exec
DELETE FROM observations
WHERE id = $1 AND patient_id = $2
`

type DeleteObservationParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) DeleteObservation(ctx context.Context, arg DeleteObservationParams) error {
	_, err := q.db.ExecContext(ctx, deleteObservation, arg.ID, arg.PatientID)
	return err
}

const getObservationByID = `-- name: GetObservationByID :one
SELECT id, patient_id, status, code_text, effective_date_time, value_string, created_at, updated_at FROM observations
WHERE id = $1 AND patient_id = $2
LIMIT 1
`

type GetObservationByIDParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) GetObservationByID(ctx context.Context, arg GetObservationByIDParams) (Observation, error) {
	row := q.db.QueryRowContext(ctx, getObservationByID, arg.ID, arg.PatientID)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.CodeText,
		&i.EffectiveDateTime,
		&i.ValueString,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listObservationsByPatient = `-- name: ListObservationsByPatient :many
SELECT id, patient_id, status, code_text, effective_date_time, value_string, created_at, updated_at FROM observations
WHERE patient_id = $1
ORDER BY effective_date_time DESC
`

func (q *Queries) ListObservationsByPatient(ctx context.Context, patientID int64) ([]Observation, error) {
	rows, err := q.db.QueryContext(ctx, listObservationsByPatient, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Observation
	for rows.Next() {
		var i Observation
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.Status,
			&i.CodeText,
			&i.EffectiveDateTime,
			&i.ValueString,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateObservation = `-- name: UpdateObservation :one
UPDATE observations
SET
    -- specialist_id 
    status = $2, 
    code_text = $3,
    effective_date_time = $4,
    value_string = $5,
    updated_at = NOW()
WHERE id = $1 AND patient_id = $6 
RETURNING id, patient_id, status, code_text, effective_date_time, value_string, created_at, updated_at
`

type UpdateObservationParams struct {
	ID                uuid.UUID `json:"id"`
	Status            string    `json:"status"`
	CodeText          string    `json:"code_text"`
	EffectiveDateTime time.Time `json:"effective_date_time"`
	ValueString       string    `json:"value_string"`
	PatientID         int64     `json:"patient_id"`
}

func (q *Queries) UpdateObservation(ctx context.Context, arg UpdateObservationParams) (Observation, error) {
	row := q.db.QueryRowContext(ctx, updateObservation,
		arg.ID,
		arg.Status,
		arg.CodeText,
		arg.EffectiveDateTime,
		arg.ValueString,
		arg.PatientID,
	)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.CodeText,
		&i.EffectiveDateTime,
		&i.ValueString,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
