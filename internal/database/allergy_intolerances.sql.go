// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: allergy_intolerances.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAllergyIntolerance = `-- name: CreateAllergyIntolerance :one
INSERT INTO allergy_intolerances (
    patient_id,
    clinical_status_code,
    clinical_status_display,
    code_system,
    code_code,
    code_display,
    criticality,
    reaction_manifestation_text
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, patient_id, clinical_status_code, clinical_status_display, code_system, code_code, code_display, criticality, reaction_manifestation_text, created_at, updated_at
`

type CreateAllergyIntoleranceParams struct {
	PatientID                 int64          `json:"patient_id"`
	ClinicalStatusCode        string         `json:"clinical_status_code"`
	ClinicalStatusDisplay     sql.NullString `json:"clinical_status_display"`
	CodeSystem                sql.NullString `json:"code_system"`
	CodeCode                  string         `json:"code_code"`
	CodeDisplay               string         `json:"code_display"`
	Criticality               sql.NullString `json:"criticality"`
	ReactionManifestationText sql.NullString `json:"reaction_manifestation_text"`
}

func (q *Queries) CreateAllergyIntolerance(ctx context.Context, arg CreateAllergyIntoleranceParams) (AllergyIntolerance, error) {
	row := q.db.QueryRowContext(ctx, createAllergyIntolerance,
		arg.PatientID,
		arg.ClinicalStatusCode,
		arg.ClinicalStatusDisplay,
		arg.CodeSystem,
		arg.CodeCode,
		arg.CodeDisplay,
		arg.Criticality,
		arg.ReactionManifestationText,
	)
	var i AllergyIntolerance
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.ClinicalStatusCode,
		&i.ClinicalStatusDisplay,
		&i.CodeSystem,
		&i.CodeCode,
		&i.CodeDisplay,
		&i.Criticality,
		&i.ReactionManifestationText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllergyIntolerance = `-- name: DeleteAllergyIntolerance :exec
DELETE FROM allergy_intolerances
WHERE id = $1 AND patient_id = $2
`

type DeleteAllergyIntoleranceParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) DeleteAllergyIntolerance(ctx context.Context, arg DeleteAllergyIntoleranceParams) error {
	_, err := q.db.ExecContext(ctx, deleteAllergyIntolerance, arg.ID, arg.PatientID)
	return err
}

const getAllergyIntoleranceByID = `-- name: GetAllergyIntoleranceByID :one
SELECT id, patient_id, clinical_status_code, clinical_status_display, code_system, code_code, code_display, criticality, reaction_manifestation_text, created_at, updated_at FROM allergy_intolerances
WHERE id = $1 AND patient_id = $2
LIMIT 1
`

type GetAllergyIntoleranceByIDParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) GetAllergyIntoleranceByID(ctx context.Context, arg GetAllergyIntoleranceByIDParams) (AllergyIntolerance, error) {
	row := q.db.QueryRowContext(ctx, getAllergyIntoleranceByID, arg.ID, arg.PatientID)
	var i AllergyIntolerance
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.ClinicalStatusCode,
		&i.ClinicalStatusDisplay,
		&i.CodeSystem,
		&i.CodeCode,
		&i.CodeDisplay,
		&i.Criticality,
		&i.ReactionManifestationText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllergyIntolerancesByPatient = `-- name: ListAllergyIntolerancesByPatient :many
SELECT id, patient_id, clinical_status_code, clinical_status_display, code_system, code_code, code_display, criticality, reaction_manifestation_text, created_at, updated_at FROM allergy_intolerances
WHERE patient_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAllergyIntolerancesByPatient(ctx context.Context, patientID int64) ([]AllergyIntolerance, error) {
	rows, err := q.db.QueryContext(ctx, listAllergyIntolerancesByPatient, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllergyIntolerance
	for rows.Next() {
		var i AllergyIntolerance
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.ClinicalStatusCode,
			&i.ClinicalStatusDisplay,
			&i.CodeSystem,
			&i.CodeCode,
			&i.CodeDisplay,
			&i.Criticality,
			&i.ReactionManifestationText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAllergyIntolerance = `-- name: UpdateAllergyIntolerance :one
UPDATE allergy_intolerances
SET
    clinical_status_code = $2,
    clinical_status_display = $3,
    code_system = $4,
    code_code = $5,
    code_display = $6,
    criticality = $7,
    reaction_manifestation_text = $8,
    updated_at = NOW()
WHERE id = $1 AND patient_id = $9 -- Ensures update is for the correct patient
RETURNING id, patient_id, clinical_status_code, clinical_status_display, code_system, code_code, code_display, criticality, reaction_manifestation_text, created_at, updated_at
`

type UpdateAllergyIntoleranceParams struct {
	ID                        uuid.UUID      `json:"id"`
	ClinicalStatusCode        string         `json:"clinical_status_code"`
	ClinicalStatusDisplay     sql.NullString `json:"clinical_status_display"`
	CodeSystem                sql.NullString `json:"code_system"`
	CodeCode                  string         `json:"code_code"`
	CodeDisplay               string         `json:"code_display"`
	Criticality               sql.NullString `json:"criticality"`
	ReactionManifestationText sql.NullString `json:"reaction_manifestation_text"`
	PatientID                 int64          `json:"patient_id"`
}

func (q *Queries) UpdateAllergyIntolerance(ctx context.Context, arg UpdateAllergyIntoleranceParams) (AllergyIntolerance, error) {
	row := q.db.QueryRowContext(ctx, updateAllergyIntolerance,
		arg.ID,
		arg.ClinicalStatusCode,
		arg.ClinicalStatusDisplay,
		arg.CodeSystem,
		arg.CodeCode,
		arg.CodeDisplay,
		arg.Criticality,
		arg.ReactionManifestationText,
		arg.PatientID,
	)
	var i AllergyIntolerance
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.ClinicalStatusCode,
		&i.ClinicalStatusDisplay,
		&i.CodeSystem,
		&i.CodeCode,
		&i.CodeDisplay,
		&i.Criticality,
		&i.ReactionManifestationText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
