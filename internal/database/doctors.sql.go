// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: doctors.sql

package database

import (
	"context"
)

const createDoctor = `-- name: CreateDoctor :one
INSERT INTO doctors(user_id,specialization,license_number,description , years_of_experience , county , price_per_hour) VALUES ($1,$2,$3,$4,$5,$6,$7)RETURNING doctor_id, user_id, description, specialization, years_of_experience, county, price_per_hour, license_number, created_at, updated_at
`

type CreateDoctorParams struct {
	UserID            int64
	Specialization    string
	LicenseNumber     string
	Description       string
	YearsOfExperience int32
	County            string
	PricePerHour      string
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) (Doctor, error) {
	row := q.db.QueryRowContext(ctx, createDoctor,
		arg.UserID,
		arg.Specialization,
		arg.LicenseNumber,
		arg.Description,
		arg.YearsOfExperience,
		arg.County,
		arg.PricePerHour,
	)
	var i Doctor
	err := row.Scan(
		&i.DoctorID,
		&i.UserID,
		&i.Description,
		&i.Specialization,
		&i.YearsOfExperience,
		&i.County,
		&i.PricePerHour,
		&i.LicenseNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDoctors = `-- name: GetDoctors :many
SELECT 
    users.full_name, 
    doctors.specialization, 
    doctors.doctor_id, 
    users.profile_image_url, 
    doctors.description, 
    doctors.county, 
    doctors.price_per_hour, 
    doctors.years_of_experience
FROM doctors
INNER JOIN users ON doctors.user_id = users.user_id
WHERE 
    ($1 = '' OR doctors.county ILIKE $1) -- County filter
ORDER BY 
    CASE 
        WHEN $2 = 'price' AND $3 = 'asc' THEN doctors.price_per_hour 
        WHEN $2 = 'price' AND $3 = 'desc' THEN doctors.price_per_hour * -1
        WHEN $2 = 'experience' AND $3 = 'asc' THEN doctors.years_of_experience
        WHEN $2 = 'experience' AND $3 = 'desc' THEN doctors.years_of_experience * -1
    END
LIMIT $4  OFFSET $5
`

type GetDoctorsParams struct {
	Column1 interface{}
	Column2 interface{}
	Column3 interface{}
	Limit   int32
	Offset  int32
}

type GetDoctorsRow struct {
	FullName          string
	Specialization    string
	DoctorID          int64
	ProfileImageUrl   string
	Description       string
	County            string
	PricePerHour      string
	YearsOfExperience int32
}

func (q *Queries) GetDoctors(ctx context.Context, arg GetDoctorsParams) ([]GetDoctorsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDoctors,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDoctorsRow
	for rows.Next() {
		var i GetDoctorsRow
		if err := rows.Scan(
			&i.FullName,
			&i.Specialization,
			&i.DoctorID,
			&i.ProfileImageUrl,
			&i.Description,
			&i.County,
			&i.PricePerHour,
			&i.YearsOfExperience,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
