// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medication_statement.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMedicationStatement = `-- name: CreateMedicationStatement :one
INSERT INTO medication_statements (
    patient_id,
    status,
    medication_code_system,
    medication_code_code,
    medication_code_display,
    dosage_text,
    effective_date_time
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, patient_id, status, medication_code_system, medication_code_code, medication_code_display, dosage_text, effective_date_time, created_at, updated_at
`

type CreateMedicationStatementParams struct {
	PatientID             int64          `json:"patient_id"`
	Status                string         `json:"status"`
	MedicationCodeSystem  sql.NullString `json:"medication_code_system"`
	MedicationCodeCode    string         `json:"medication_code_code"`
	MedicationCodeDisplay string         `json:"medication_code_display"`
	DosageText            sql.NullString `json:"dosage_text"`
	EffectiveDateTime     sql.NullTime   `json:"effective_date_time"`
}

func (q *Queries) CreateMedicationStatement(ctx context.Context, arg CreateMedicationStatementParams) (MedicationStatement, error) {
	row := q.db.QueryRowContext(ctx, createMedicationStatement,
		arg.PatientID,
		arg.Status,
		arg.MedicationCodeSystem,
		arg.MedicationCodeCode,
		arg.MedicationCodeDisplay,
		arg.DosageText,
		arg.EffectiveDateTime,
	)
	var i MedicationStatement
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.MedicationCodeSystem,
		&i.MedicationCodeCode,
		&i.MedicationCodeDisplay,
		&i.DosageText,
		&i.EffectiveDateTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMedicationStatement = `-- name: DeleteMedicationStatement :exec
DELETE FROM medication_statements
WHERE id = $1 AND patient_id = $2
`

type DeleteMedicationStatementParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) DeleteMedicationStatement(ctx context.Context, arg DeleteMedicationStatementParams) error {
	_, err := q.db.ExecContext(ctx, deleteMedicationStatement, arg.ID, arg.PatientID)
	return err
}

const getMedicationStatementByID = `-- name: GetMedicationStatementByID :one
SELECT id, patient_id, status, medication_code_system, medication_code_code, medication_code_display, dosage_text, effective_date_time, created_at, updated_at FROM medication_statements
WHERE id = $1 AND patient_id = $2
LIMIT 1
`

type GetMedicationStatementByIDParams struct {
	ID        uuid.UUID `json:"id"`
	PatientID int64     `json:"patient_id"`
}

func (q *Queries) GetMedicationStatementByID(ctx context.Context, arg GetMedicationStatementByIDParams) (MedicationStatement, error) {
	row := q.db.QueryRowContext(ctx, getMedicationStatementByID, arg.ID, arg.PatientID)
	var i MedicationStatement
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.MedicationCodeSystem,
		&i.MedicationCodeCode,
		&i.MedicationCodeDisplay,
		&i.DosageText,
		&i.EffectiveDateTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMedicationStatementsByPatient = `-- name: ListMedicationStatementsByPatient :many
SELECT id, patient_id, status, medication_code_system, medication_code_code, medication_code_display, dosage_text, effective_date_time, created_at, updated_at FROM medication_statements
WHERE patient_id = $1
ORDER BY effective_date_time DESC, created_at DESC
`

func (q *Queries) ListMedicationStatementsByPatient(ctx context.Context, patientID int64) ([]MedicationStatement, error) {
	rows, err := q.db.QueryContext(ctx, listMedicationStatementsByPatient, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MedicationStatement
	for rows.Next() {
		var i MedicationStatement
		if err := rows.Scan(
			&i.ID,
			&i.PatientID,
			&i.Status,
			&i.MedicationCodeSystem,
			&i.MedicationCodeCode,
			&i.MedicationCodeDisplay,
			&i.DosageText,
			&i.EffectiveDateTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedicationStatement = `-- name: UpdateMedicationStatement :one
UPDATE medication_statements
SET
    status = $2,
    medication_code_system = $3,
    medication_code_code = $4,
    medication_code_display = $5,
    dosage_text = $6,
    effective_date_time = $7,
    updated_at = NOW()
WHERE id = $1 AND patient_id = $8 -- Ensure update is for the correct patient
RETURNING id, patient_id, status, medication_code_system, medication_code_code, medication_code_display, dosage_text, effective_date_time, created_at, updated_at
`

type UpdateMedicationStatementParams struct {
	ID                    uuid.UUID      `json:"id"`
	Status                string         `json:"status"`
	MedicationCodeSystem  sql.NullString `json:"medication_code_system"`
	MedicationCodeCode    string         `json:"medication_code_code"`
	MedicationCodeDisplay string         `json:"medication_code_display"`
	DosageText            sql.NullString `json:"dosage_text"`
	EffectiveDateTime     sql.NullTime   `json:"effective_date_time"`
	PatientID             int64          `json:"patient_id"`
}

func (q *Queries) UpdateMedicationStatement(ctx context.Context, arg UpdateMedicationStatementParams) (MedicationStatement, error) {
	row := q.db.QueryRowContext(ctx, updateMedicationStatement,
		arg.ID,
		arg.Status,
		arg.MedicationCodeSystem,
		arg.MedicationCodeCode,
		arg.MedicationCodeDisplay,
		arg.DosageText,
		arg.EffectiveDateTime,
		arg.PatientID,
	)
	var i MedicationStatement
	err := row.Scan(
		&i.ID,
		&i.PatientID,
		&i.Status,
		&i.MedicationCodeSystem,
		&i.MedicationCodeCode,
		&i.MedicationCodeDisplay,
		&i.DosageText,
		&i.EffectiveDateTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
