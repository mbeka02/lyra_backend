// internal/server/repository/ehr_allergy_repository.go
package repository

import (
	"context"

	"github.com/google/uuid" // If using UUIDs and need to handle them
	"github.com/mbeka02/lyra_backend/internal/database"
)

type AllergyIntoleranceRepository interface {
	Create(ctx context.Context, params database.CreateAllergyIntoleranceParams) (database.AllergyIntolerance, error)
	GetByID(ctx context.Context, id uuid.UUID, patientID int64) (database.AllergyIntolerance, error)
	ListByPatientID(ctx context.Context, patientID int64) ([]database.AllergyIntolerance, error)
	Update(ctx context.Context, params database.UpdateAllergyIntoleranceParams) (database.AllergyIntolerance, error)
	Delete(ctx context.Context, id uuid.UUID, patientID int64) error
}

type sqlAllergyIntoleranceRepository struct {
	store *database.Store
}

func NewSQLAllergyIntoleranceRepository(store *database.Store) AllergyIntoleranceRepository {
	return &sqlAllergyIntoleranceRepository{store: store}
}

func (r *sqlAllergyIntoleranceRepository) Create(ctx context.Context, params database.CreateAllergyIntoleranceParams) (database.AllergyIntolerance, error) {
	// Note: sqlc generated CreateAllergyIntolerance returns the full struct.
	// The ID is generated by the DB if using `DEFAULT gen_random_uuid()`.
	return r.store.CreateAllergyIntolerance(ctx, params)
}

func (r *sqlAllergyIntoleranceRepository) GetByID(ctx context.Context, id uuid.UUID, patientID int64) (database.AllergyIntolerance, error) {
	return r.store.GetAllergyIntoleranceByID(ctx, database.GetAllergyIntoleranceByIDParams{
		ID:        id,
		PatientID: patientID,
	})
}

func (r *sqlAllergyIntoleranceRepository) ListByPatientID(ctx context.Context, patientID int64) ([]database.AllergyIntolerance, error) {
	return r.store.ListAllergyIntolerancesByPatient(ctx, patientID)
}

func (r *sqlAllergyIntoleranceRepository) Update(ctx context.Context, params database.UpdateAllergyIntoleranceParams) (database.AllergyIntolerance, error) {
	return r.store.UpdateAllergyIntolerance(ctx, params)
}

func (r *sqlAllergyIntoleranceRepository) Delete(ctx context.Context, id uuid.UUID, patientID int64) error {
	return r.store.DeleteAllergyIntolerance(ctx, database.DeleteAllergyIntoleranceParams{
		ID:        id,
		PatientID: patientID,
	})
}
